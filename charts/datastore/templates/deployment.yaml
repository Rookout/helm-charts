---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "datastore.fullname" . }}
  labels:
    product: {{ template "datastore.name" . }}
    app: rookout
spec:
  strategy:
    type: Recreate
  replicas: 1
  selector:
    matchLabels:
      product: {{ template "datastore.name" . }}
  template:
    metadata:
      labels:
        product: {{ template "datastore.name" . }}
        app: rookout
{{- if .Values.datastore.labels }}
{{ toYaml .Values.datastore.labels | indent 8 }}
{{- end }}
{{- if .Values.podAnnotations }}
      annotations:
{{ toYaml .Values.podAnnotations | indent 8 }}
{{- end }}
    spec:
      securityContext:
        # group ID 1000 is associated with all Containers in the Pod automatically by k8s
        # we use it to give non-root user access to mounted volumes
        fsGroup: 1000
        runAsUser: 12345
{{- if .Values.serviceAccount.name }}
      serviceAccount: {{ .Values.serviceAccount.name }}
      serviceAccountName: {{ .Values.serviceAccount.name }}
{{- end }}
      containers:
        - name: {{ template "datastore.name" . }}
          image: "{{ .Values.image.repository }}:{{ default "latest" .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
{{- if .Values.datastore.logging.enabled }}
            - name: ROOKOUT_DOP_LOGGING_TOKEN
{{- if .Values.datastore.token }}
              value: {{ .Values.datastore.token }}
{{- else }}
              valueFrom:
                secretKeyRef:
{{- if (.Values.datastore.tokenFromSecret) }}
{{ toYaml .Values.datastore.tokenFromSecret | indent 18 }}
{{- else }}
                  name: rookout
                  key: token
{{- end }}
{{- end }}
{{- end }}
{{- if (eq .Values.datastore.inMemoryDb true) }}
            - name: ROOKOUT_DOP_IN_MEMORY_DB
              value: "True"
{{- end }}
{{- if (.Values.datastore.url_prefix) }}
            - name: ROOKOUT_DOP_URL_PREFIX
              value: {{ .Values.datastore.url_prefix | quote }}
{{- end }}
            - name: ROOKOUT_DOP_SERVER_MODE
              value: {{ .Values.datastore.serverMode | quote }}
            - name: ROOKOUT_DOP_PORT
              value: {{ .Values.datastore.dopContainerPort }}
            - name: ROOKOUT_DOP_AUTO_TLS_DOMAIN
              value: {{ .Values.datastore.autoTlsDomain | quote }}
            {{ if (eq .Values.datastore.serverMode "AUTOTLS") }}
            - name: ROOKOUT_DOP_ENABLE_FILE_LOGGER
              value: "False"
            - name: ROOKOUT_DOP_LETS_ENCRYPT_PORT
              value: {{ .Values.datastore.letsEncryptContainerlPort }}
            {{ end }}
          ports:
            - containerPort: {{ .Values.datastore.dopContainerPort }}
            {{ if (eq .Values.datastore.serverMode "AUTOTLS") }}
            - containerPort: {{ .Values.datastore.letsEncryptContainerlPort }}
            {{ end }}
          volumeMounts:
            {{- if (eq .Values.datastore.inMemoryDb false) }}
            - mountPath: "/var/rookout/database/db"
              name: rookout-volume
            {{ end }}
            - mountPath: "/var/rookout/certs"
              name: rookout-volume
            {{ if (eq .Values.datastore.serverMode "TLS") }}
            - mountPath: /var/rookout/key.pem
              subPath: key.pem
              name: tls-key
              readOnly: true
            - mountPath: /var/rookout/cert.pem
              subPath: cert.pem
              name: tls-cert
              readOnly: true
            {{ end }}
      volumes:
        {{- if (eq .Values.datastore.inMemoryDb false) }}
        - name: rookout-volume
          persistentVolumeClaim:
            claimName: rookout-data-on-prem-pvc
        {{ end }}
        {{ if (eq .Values.datastore.serverMode "TLS") }}
        - name: tls-key
          secret:
            secretName: {{ required "In TLS mode, secretName holding key must be specified in datastore.tlsKeySecretName." .Values.datastore.tlsKeySecretName  }}
        - name: tls-cert
          configMap:
            name: {{ required "In TLS mode, configmapName holding the cert must be specified in datastore.tlsCertificateConfigmapName." .Values.datastore.tlsCertificateConfigmapName  }}
        {{ end }}
