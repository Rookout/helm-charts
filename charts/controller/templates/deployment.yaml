---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "controller.fullname" . }}
  labels:
    app: {{ template "controller.name" . }}
    chart: {{ template "controller.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels: 
      app: {{ template "controller.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "controller.name" . }}
        release: {{ .Release.Name }}
{{- if .Values.controller.labels }}
{{ toYaml .Values.controller.labels | indent 8 }}
{{- end }}
{{- if .Values.podAnnotations }}
      annotations:
{{ toYaml .Values.podAnnotations | indent 8 }}
{{- end }}
    spec:
{{- if .Values.affinity }}
      affinity:
{{ toYaml .Values.affinity | indent 8 }}
{{- end}}
{{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
{{- end}}
{{- if .Values.tolerations }}
      tolerations:
{{ toYaml .Values.tolerations | indent 8 }}
{{- end}}
      securityContext:
        fsGroup: 5000
        runAsUser: 5000
        runAsGroup: 5000
{{- if .Values.serviceAccount.name }}
      serviceAccount: {{ .Values.serviceAccount.name }}
      serviceAccountName: {{ .Values.serviceAccount.name }}
{{- end }}
      containers:
        - name: {{ .Release.Name }}-{{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          resources:
{{ toYaml .Values.controller.resources | indent 12 }}
          env:
            - name: ROOKOUT_TOKEN
{{- if .Values.controller.token }}
              value: {{ .Values.controller.token }}
{{- else }}
              valueFrom:
                secretKeyRef:
{{- if (.Values.controller.tokenFromSecret) }}
{{ toYaml .Values.controller.tokenFromSecret | indent 18 }}
{{- else }}
                  name: rookout
                  key: token
{{- end }}
{{- end }}
{{- if (.Values.controller.proxy) }}
            - name: ROOKOUT_PROXY
              value: {{ .Values.controller.proxy | quote }}
{{- end }}
{{- if (.Values.controller.proxyUsername) }}
            - name: ROOKOUT_PROXY_USERNAME
              value: {{ .Values.controller.proxyUsername | quote }}
{{- end }}
{{- if or (.Values.controller.proxyPassword) (.Values.controller.proxyPasswordFromSecret) }}
            - name: ROOKOUT_PROXY_PASSWORD
{{- if .Values.controller.proxyPassword }}
              value: {{ .Values.controller.proxyPassword | quote }}
{{- else }}
              valueFrom:
                secretKeyRef:
{{ toYaml .Values.controller.proxyPasswordFromSecret | indent 18 }}
{{- end }}
{{- end }}

            - name: ROOKOUT_CONTROLLER_SERVER_MODE
              value: {{ required "controller.serverMode is required" .Values.controller.serverMode | quote }}
            - name: ROOKS_WS_LISTEN_ADDR
              value: ":{{ .Values.controller.port }}"
            - name: ROOKOUT_LISTEN_ALL
              value: {{ .Values.controller.listenAll | quote }}
            - name: ROOKOUT_AGENT_MAX_CPU
              value: {{ .Values.controller.internalResources.limits.cpu | quote }}
            - name: ROOKOUT_AGENT_MAX_MEMORY
              value: {{ .Values.controller.internalResources.limits.memory | quote }}
            - name: ROOKOUT_DOP_NO_SSL_VERIFY
              value: {{ default false .Values.controller.datastore_no_ssl_verif | quote }}
          ports:
            - name: websocket
              containerPort: {{ .Values.controller.port }}
          livenessProbe:
            tcpSocket:
              port: {{ .Values.controller.port }}
            initialDelaySeconds: 15
            periodSeconds: 20
{{ if (eq (required "controller.serverMode is required" .Values.controller.serverMode) "TLS") }}
          volumeMounts:
          - mountPath: /var/controller-tls-secrets/tls.key
            subPath: tls.key
            name: tls-key
            readOnly: true
          - mountPath: /var/controller-tls-secrets/tls.crt
            subPath: tls.crt
            name: tls-cert
            readOnly: true
{{ end }}
{{ if (eq (required "controller.serverMode is required" .Values.controller.serverMode) "TLS") }}
      volumes:
      - name: tls-key
        secret:
          secretName: rookout-tls-key
      - name: tls-cert
        configMap:
          name: rookout-tls-cert
{{ end }}